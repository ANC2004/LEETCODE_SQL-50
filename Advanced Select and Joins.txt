1)The Number of Employees Which Report to Each Employee

SELECT e.employee_id,e.name,
COUNT(r.employee_id) AS reports_count,
ROUND(AVG(r.age)) AS average_age
FROM Employees e JOIN Employees r
ON e.employee_id = r.reports_to
GROUP BY e.employee_id, e.name
ORDER BY e.employee_id;


2)Primary Department for Each Employee

SELECT employee_id, department_id
FROM Employee
WHERE primary_flag = 'Y' 
OR employee_id IN (
SELECT employee_id FROM Employee
GROUP BY employee_id HAVING COUNT(*) = 1);


3)Triangle Judgement

SELECT 
  x, y, z,
  CASE WHEN x + y > z AND x + z > y AND y + z > x THEN 'Yes' ELSE 'No'
  END AS triangle
FROM Triangle;


4)Consecutive Numbers

SELECT DISTINCT l1.num AS ConsecutiveNums
FROM Logs l1, Logs l2, Logs l3 
WHERE l1.id - l2.id = 1 
AND l2.id - l3.id  = 1
AND l1.num = l2.num 
AND l2.num = l3.num 
AND l1.num = l3.num;


5)Product Price at a Given Date

SELECT product_id, new_price AS price
FROM Products
WHERE (product_id, change_date) IN (
    SELECT product_id, MAX(change_date)
    FROM Products
    WHERE change_date <= '2019-08-16'
    GROUP BY product_id
)

UNION

SELECT product_id, 10 AS price
FROM Products
WHERE product_id NOT IN (
    SELECT product_id
    FROM Products
    WHERE change_date <= '2019-08-16'
);


6)Last Person to Fit in the Bus

SELECT person_name
FROM (
    SELECT q1.person_name, q1.turn
    FROM Queue q1
    JOIN Queue q2 ON q2.turn <= q1.turn
    GROUP BY q1.person_name, q1.turn
    HAVING SUM(q2.weight) <= 1000
    ORDER BY q1.turn DESC
)
WHERE ROWNUM = 1;


7)Count Salary Categories

SELECT 'Low Salary' AS category, COUNT(account_id) AS accounts_count
FROM Accounts WHERE income < 20000
UNION
SELECT 'Average Salary' AS category, COUNT(account_id) AS accounts_count
FROM Accounts WHERE income BETWEEN 20000 AND 50000
UNION
SELECT 'High Salary' AS category, COUNT(account_id) AS accounts_count
FROM Accounts WHERE income > 50000;
